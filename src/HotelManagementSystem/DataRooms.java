/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HotelManagementSystem;

import database.Dbconnection;
import database.Dbconnection;
import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class DataRooms extends Menu {
     
//    Menyimpan koneksi ke mysql
    Connection conn;
    
//    Variabel statement
    Statement stmt;
    
//    Variabel untuk menyimpan hasil
    ResultSet rs;
    
    Dbconnection connection;
    
    // Table for displaying customer data
        String[] columnNames = {"ID", "Nama", "No Ruangan", "Kontak", "Durasi"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

    /**
     * Creates new form DashboardAdmin
     */
    public DataCustomers() {
        initComponents();
        
        connection = new Dbconnection();
        conn = connection.getConnection();
        
        displayCustomerData();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNoRuangan = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxStatus = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldHarga = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButtoRefresh = new javax.swing.JButton();
        jComboBoxKategori = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDataRoom = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Data Rooms");

        jLabel1.setText("No Ruangan");

        jLabel3.setText("Kategori");

        jLabel4.setText("Status");

        jComboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Status", "Kosong", "Di Sewa" }));
        jComboBoxStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStatusActionPerformed(evt);
            }
        });

        jLabel5.setText("Harga");

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtoRefresh.setText("Refresh");
        jButtoRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtoRefreshActionPerformed(evt);
            }
        });

        jComboBoxKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Kategori", "Eksekutif", "Ekonomi" }));

        jTableDataRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableDataRoom);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jComboBoxKategori, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtoRefresh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextFieldHarga, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBoxStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, 187, Short.MAX_VALUE)
                                .addComponent(jTextFieldNoRuangan, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNoRuangan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButtoRefresh))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(175, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxStatusActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        insertRoomData();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtoRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtoRefreshActionPerformed
        // TODO add your handling code here:
        displayRoomData();
    }//GEN-LAST:event_jButtoRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataRooms().setVisible(true);
            }
        });
    }
    
//    Utils
    private void addCustomerBooking() {
        String name = jTextFieldNama.getText();
        int room = Integer.parseInt(jTextFieldNoRuangan.getText());
        String contact = jTextFieldKontak.getText();
        int duration = Integer.parseInt(jComboBoxDurasiHari.getSelectedItem().toString());
        String payment = jComboBoxJenisPembayaran.getSelectedItem().toString();

        try {
            // Check if the room exists in the 'ruangan' table
        String checkRoomSql = "SELECT COUNT(*) AS count FROM ruangan WHERE no_ruangan = ?";
        PreparedStatement checkRoomStmt = conn.prepareStatement(checkRoomSql);
        checkRoomStmt.setInt(1, room);
        ResultSet rs = checkRoomStmt.executeQuery();
        
        if (rs.next() && rs.getInt("count") > 0) {
            // Insert into 'customer' table
            String sql = "INSERT INTO customer (id,nama, no_ruangan, kontak, durasi) VALUES (?, ?, ?, ?, ?)";
            // Batas atas untuk ID, misalnya 10000 untuk menghasilkan ID antara 0 dan 9999
            int upperBound = 10000;

            // Menghasilkan ID acak
            int randomID = (int) (Math.random() * upperBound);
            
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, randomID);
            pstmt.setString(2, name);
            pstmt.setInt(3, room);
            pstmt.setString(4, contact);
            pstmt.setInt(5, duration);
            pstmt.executeUpdate();
            
            
            
            double hargaTransaksi = Double.parseDouble(jTextFieldHarga.getText());

            // Insert into 'detail_transaksi' table
            sql = "INSERT INTO detail_transaksi (no_ruangan, tanggal_booking, durasi, customer_id, jenis_pembayaran, harga_transaksi) " +
                  "VALUES (?, CURDATE(), ?, ?, ?, ?)";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, room);
                pstmt.setInt(2, duration);
                pstmt.setInt(3, randomID);
                pstmt.setString(4, payment);
                pstmt.setDouble(5, hargaTransaksi);
            pstmt.executeUpdate();
            
            // Update room status to 'kosong'
                sql = "UPDATE ruangan SET status = 'Di Sewa' WHERE no_ruangan = ?";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, room);
                pstmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Data customer berhasil ditambahkan !");
        } else {
            JOptionPane.showMessageDialog(this, "No Ruangan tidak ada !");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
    }
    
    private void displayCustomerData(){
         try {
            String sql = "SELECT * FROM customer";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            // Clear existing data
            model.setRowCount(0);

            // Add new data to table model
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id"),
                    rs.getString("nama"),
                    rs.getInt("no_ruangan"),
                    rs.getString("kontak"),
                    rs.getInt("durasi")
                };
                model.addRow(row);
                jTableDataCustomer.setModel(model);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
     }
    
    private void displayHarga(){
         try{
            // Check if the room exists in the 'ruangan' table
            String checkRoomSql = "SELECT harga FROM ruangan WHERE no_ruangan = ?";
            PreparedStatement checkRoomStmt = conn.prepareStatement(checkRoomSql);
            
//            Variabel ruangan
            int room = Integer.parseInt(jTextFieldNoRuangan.getText());
            checkRoomStmt.setInt(1, room);
            ResultSet rs = checkRoomStmt.executeQuery();
            if (rs.next()) {
                int roomPrice = (int)rs.getDouble("harga");
                int durasi = Integer.parseInt(jComboBoxDurasiHari.getSelectedItem().toString());
                String totalPrice = Integer.toString(roomPrice * durasi);
                
                
                jTextFieldHarga.setText(totalPrice);
                }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
     } 
    
    private void deleteCustomer(){
        int idCustomer = Integer.parseInt(jTextFieldIdCustomer.getText());

        try{
        // Get room number associated with the customer
        String getRoomSql = "SELECT no_ruangan FROM customer WHERE id = ?";
        PreparedStatement getRoomStmt = conn.prepareStatement(getRoomSql);
        getRoomStmt.setInt(1, idCustomer);
        ResultSet rs = getRoomStmt.executeQuery();
        if (rs.next()) {
            int roomNumber = rs.getInt("no_ruangan");

            // Delete related data from 'detail_transaksi' table
            String deleteTransactionSql = "DELETE FROM detail_transaksi WHERE customer_id = ?";
            PreparedStatement deleteTransactionStmt = conn.prepareStatement(deleteTransactionSql);
            deleteTransactionStmt.setInt(1, idCustomer);
            deleteTransactionStmt.executeUpdate();

            // Delete customer from 'customer' table
            String deleteCustomerSql = "DELETE FROM customer WHERE id = ?";
            PreparedStatement deleteCustomerStmt = conn.prepareStatement(deleteCustomerSql);
            deleteCustomerStmt.setInt(1, idCustomer);
            deleteCustomerStmt.executeUpdate();

            // Update room status to 'kosong'
            String updateRoomSql = "UPDATE ruangan SET status = 'kosong' WHERE no_ruangan = ?";
            PreparedStatement updateRoomStmt = conn.prepareStatement(updateRoomSql);
            updateRoomStmt.setInt(1, roomNumber);
            updateRoomStmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Data customer berhasil dihapus!");

            // Refresh customer data display
            displayCustomerData();
        } else {
            JOptionPane.showMessageDialog(this, "ID Customer tidak ditemukan !");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }

    // Clear input field
    jTextFieldIdCustomer.setText("");
     }
    
        
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtoRefresh;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxKategori;
    private javax.swing.JComboBox<String> jComboBoxStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableDataRoom;
    private javax.swing.JTextField jTextFieldHarga;
    private javax.swing.JTextField jTextFieldNoRuangan;
    // End of variables declaration//GEN-END:variables
}
